# config.py
import sys, os
import numpy as np

class config:
    def __init__(self):

        ############################### CONSTRAINTS SETTINGS #################################
        ######################### AGENT SIZE ############################
        self.agent_size = 0.019 # diameter

        ################# STATE CONVEX CONSTRAINTS ######################
        self.Fx = np.array([[  99.50248756,    0.        ,    5.02487562,    0.        ],
                    [ -99.50248756,    0.        ,   -5.02487562,    0.        ],
                    [-140.71602592,    0.        ,    0.        ,    0.        ],
                    [   0.        , -140.71602592,    0.        ,    0.        ],
                    [   0.        ,    0.        ,   -7.07106781,    0.        ],
                    [   0.        ,    0.        ,    0.        ,   -7.07106781],
                    [ 140.71602592,    0.        ,    0.        ,    0.        ],
                    [   0.        ,  140.71602592,    0.        ,    0.        ],
                    [   0.        ,    0.        ,    7.07106781,    0.        ],
                    [   0.        ,    0.        ,    0.        ,    7.07106781],
                    [   0.        ,   99.50248756,    0.        ,    5.02487562],
                    [   0.        ,  -99.50248756,    0.        ,   -5.02487562]])

        self.fx = np.array([ 6.96380512e+01, -5.91515629e+01, -8.35675545e+01, -1.42232029e-02,
                        2.17714091e-01,  3.02566166e-01,  9.86831686e+01,  2.40858540e+01,
                        2.46700163e-01,  3.25832199e-01,  1.71914691e+01,  1.23152976e-01])

        ################# CONTROL CONVEX CONSTRAINTS ####################
        Workspace = np.array([[178, 47], [704, 47], [704, 817], [178, 817]], dtype=float)
        Obs1 = np.array([[568, 429], [703, 429], [703, 816], [568, 816]], dtype=float)
        Obs2 = np.array([[308, 181], [438, 181], [438, 691], [308, 691]], dtype=float)
        Obs3 = np.array([[437,  47], [568,  47], [568, 309], [437, 309]], dtype=float)
        vel_vertices   = np.array([[0.05, 0.05], [0.05, -0.05], [-0.05, -0.05], [-0.05, 0.05]], dtype=float)
        accel_vertices = np.array([[1.0, 1.0], [1.0, -1.0], [-1.0, -1.0], [-1.0, 1.0]], dtype=float)

        ####### STATE CONVEX UNSAFE CONSTRAINTS NEED TO BE AVOIDED ######


        ################ STATE NONCONVEX CONSTRAINTS ####################
        self.C_list =  [[np.array([[  99.50248756,    0.        ,    5.02487562,    0.        ],
                        [ -99.50248756,    0.        ,   -5.02487562,    0.        ],
                        [ 140.71602592,    0.        ,    0.        ,    0.        ],
                        [-140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        , -140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,   -7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,   -7.07106781],
                        [   0.        ,  140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,    7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,    7.07106781],
                        [   0.        ,   99.50248756,    0.        ,    5.02487562],
                        [   0.        ,  -99.50248756,    0.        ,   -5.02487562]]),
                np.array([[  99.50248756,    0.        ,    5.02487562,    0.        ],
                        [ -99.50248756,    0.        ,   -5.02487562,    0.        ],
                        [   0.        , -140.71602592,    0.        ,    0.        ],
                        [-140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        ,    0.        ,   -7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,   -7.07106781],
                        [ 140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        ,  140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,    7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,    7.07106781],
                        [   0.        ,   99.50248756,    0.        ,    5.02487562],
                        [   0.        ,  -99.50248756,    0.        ,   -5.02487562]])],
                [np.array([[  99.50248756,    0.        ,    5.02487562,    0.        ],
                        [ -99.50248756,    0.        ,   -5.02487562,    0.        ],
                        [ 140.71602592,    0.        ,    0.        ,    0.        ],
                        [-140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        , -140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,   -7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,   -7.07106781],
                        [   0.        ,  140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,    7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,    7.07106781],
                        [   0.        ,   99.50248756,    0.        ,    5.02487562],
                        [   0.        ,  -99.50248756,    0.        ,   -5.02487562]]),
                np.array([[  99.50248756,    0.        ,    5.02487562,    0.        ],
                        [ -99.50248756,    0.        ,   -5.02487562,    0.        ],
                        [-140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        , -140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,   -7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,   -7.07106781],
                        [ 140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        ,  140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,    7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,    7.07106781],
                        [   0.        ,   99.50248756,    0.        ,    5.02487562],
                        [   0.        ,  -99.50248756,    0.        ,   -5.02487562]]),
                np.array([[  99.50248756,    0.        ,    5.02487562,    0.        ],
                        [ -99.50248756,    0.        ,   -5.02487562,    0.        ],
                        [   0.        ,  140.71602592,    0.        ,    0.        ],
                        [-140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        , -140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,   -7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,   -7.07106781],
                        [ 140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        ,    0.        ,    7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,    7.07106781],
                        [   0.        ,   99.50248756,    0.        ,    5.02487562],
                        [   0.        ,  -99.50248756,    0.        ,   -5.02487562]]),
                np.array([[  99.50248756,    0.        ,    5.02487562,    0.        ],
                        [ -99.50248756,    0.        ,   -5.02487562,    0.        ],
                        [   0.        , -140.71602592,    0.        ,    0.        ],
                        [-140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        ,    0.        ,   -7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,   -7.07106781],
                        [ 140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        ,  140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,    7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,    7.07106781],
                        [   0.        ,   99.50248756,    0.        ,    5.02487562],
                        [   0.        ,  -99.50248756,    0.        ,   -5.02487562]])],
                [np.array([[  99.50248756,    0.        ,    5.02487562,    0.        ],
                        [ -99.50248756,    0.        ,   -5.02487562,    0.        ],
                        [ 140.71602592,    0.        ,    0.        ,    0.        ],
                        [-140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        , -140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,   -7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,   -7.07106781],
                        [   0.        ,  140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,    7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,    7.07106781],
                        [   0.        ,   99.50248756,    0.        ,    5.02487562],
                        [   0.        ,  -99.50248756,    0.        ,   -5.02487562]]),
                np.array([[  99.50248756,    0.        ,    5.02487562,    0.        ],
                        [ -99.50248756,    0.        ,   -5.02487562,    0.        ],
                        [-140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        , -140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,   -7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,   -7.07106781],
                        [ 140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        ,  140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,    7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,    7.07106781],
                        [   0.        ,   99.50248756,    0.        ,    5.02487562],
                        [   0.        ,  -99.50248756,    0.        ,   -5.02487562]]),
                np.array([[  99.50248756,    0.        ,    5.02487562,    0.        ],
                        [ -99.50248756,    0.        ,   -5.02487562,    0.        ],
                        [   0.        ,  140.71602592,    0.        ,    0.        ],
                        [-140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        , -140.71602592,    0.        ,    0.        ],
                        [   0.        ,    0.        ,   -7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,   -7.07106781],
                        [ 140.71602592,    0.        ,    0.        ,    0.        ],
                        [   0.        ,    0.        ,    7.07106781,    0.        ],
                        [   0.        ,    0.        ,    0.        ,    7.07106781],
                        [   0.        ,   99.50248756,    0.        ,    5.02487562],
                        [   0.        ,  -99.50248756,    0.        ,   -5.02487562]])]]
        
        self.c_list = [[np.array([ 66.25496661, -58.20628929,  93.89882368, -82.23075222,
                                1.32257904,   0.21771409,   0.30256617,  25.42265622,
                                0.24670016,   0.3258322 ,  18.13674273,   1.06842661]),
                        np.array([ 70.58332482, -58.20628929, -13.52296169, -82.23075222,
                                0.21771409,   0.30256617, 100.01997081,  25.42265622,
                                0.24670016,   0.3258322 ,  18.13674273,  -9.42908583])],
                        [np.array([ 59.8868074 , -58.20628929,  84.89299802, -82.23075222,
                                1.32257904,   0.21771409,   0.30256617,  25.42265622,
                                0.24670016,   0.3258322 ,  18.13674273,   1.06842661]),
                        np.array([ 70.58332482, -65.51972212, -92.57338013,   1.32257904,
                                0.21771409,   0.30256617, 100.01997081,  25.42265622,
                                0.24670016,   0.3258322 ,  18.13674273,   1.06842661]),
                        np.array([ 70.58332482, -58.20628929,   1.71200585, -82.23075222,
                                1.32257904,   0.21771409,   0.30256617, 100.01997081,
                                0.24670016,   0.3258322 ,   1.37057357,   1.06842661]),
                        np.array([ 70.58332482, -58.20628929, -22.2473553 , -82.23075222,
                                0.21771409,   0.30256617, 100.01997081,  25.42265622,
                                0.24670016,   0.3258322 ,  18.13674273, -15.59824006])],
                        [np.array([ 63.070887  , -58.20628929,  89.39591085, -82.23075222,
                                1.32257904,   0.21771409,   0.30256617,  25.42265622,
                                0.24670016,   0.3258322 ,  18.13674273,   1.06842661]),
                        np.array([ 70.58332482, -68.70380172, -97.07629296,   1.32257904,
                                0.21771409,   0.30256617, 100.01997081,  25.42265622,
                                0.24670016,   0.3258322 ,  18.13674273,   1.06842661]),
                        np.array([ 70.58332482, -58.20628929,  14.93931229, -82.23075222,
                                1.32257904,   0.21771409,   0.30256617, 100.01997081,
                                0.24670016,   0.3258322 ,  10.72380741,   1.06842661])]]

        #######################################################################################

        ###################################### SYSTEM DYNAMICS #################################
        self.sys_dt = 0.1 # system dynamics time step [Note]: you will need to recalculate the Control invariant set if you change this value
        self.damping_factor = 0.1  ## system dynamics damping factor # [Note]: you will need to recalculate the Control invariant set if you change this value
        
        # State transition matrix with damping
        dt = self.sys_dt; damping_fun = 1 - self.damping_factor * dt
        self.A = np.array([[1, 0, dt, 0],
                           [0, 1, 0, dt],
                           [0, 0, damping_fun, 0],
                           [0, 0, 0, damping_fun]])
        
        self.B = np.array([[0.5 * dt**2, 0],
                   [0, 0.5 * dt**2],
                   [dt, 0],
                   [0, dt]])
            
        #################################### DISTURBANCES #####################################
        self.E = np.array([[1., 0., 0., 0.],
                           [0., 1., 0., 0.],
                           [0., 0., 1., 0.],
                           [0., 0., 0., 1.]])

        self.Gw = np.array([[ 1.,  0.,  0.,  0.],
                             [ 0.,  1.,  0.,  0.],
                             [ 0.,  0.,  1.,  0.],
                             [ 0.,  0.,  0.,  1.],
                             [-1., -0., -0., -0.],
                             [-0., -1., -0., -0.],
                             [-0., -0., -1., -0.],
                             [-0., -0., -0., -1.]])
        
        self.Fw = np.array([[0.00220696731294516, 0.00033361141907932, 0.01511132840251176, 0.00392036854057386, 0.00137375336326578, 0.00060107734896421, 0.01921057797980761, 0.00721068247405685]]).T
        ########################################################################################

        ##################################### SIMULATION SETTINGS ##############################
        self.joystick_frequency = 20 # joystick publishing frequency
        self.controller_frequency = 50 # controller frequency
        self.simulation_frequency = 1/self.sys_dt # simulation frequency [Note]: you will need to recalculate the Control invariant set if you change this value
        self.disturbance = True
        
        # self.consider_only_constraints = [] ## you can select constraints specified in nonconvex setting
        # map_name = 'real_world_exp_dist.png'
        # self.user_study_path = self.root_path + 'user_study'
        # self.user_study_data_path = self.root_path + 'user_study/data'
        # self.image_map_path = self.root_path + 'lib/extra/map/' + map_name
        ########################################################################################

        ########################################## PATH SETTINGS ###############################
        import sys, os
        from pathlib import Path

        project_root = str(Path(__file__).resolve().parent)
        print ("project_root", project_root)
        self.root_path = project_root + '/' 
        self.lib_path = self.root_path + 'lib'
        self.ros_path = self.root_path + 'ros'
        self.ros_setup_path = self.ros_path + "/devel/setup.bash"
        self.matlab_cis_path = self.lib_path + "/cis2m/matlab/"
        ############################################################################################